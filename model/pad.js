/**
* # Pad Model
*
*  ## License
*
*  Licensed to the Apache Software Foundation (ASF) under one
*  or more contributor license agreements.  See the NOTICE file
*  distributed with this work for additional information
*  regarding copyright ownership.  The ASF licenses this file
*  to you under the Apache License, Version 2.0 (the
*  "License"); you may not use this file except in compliance
*  with the License.  You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing,
*  software distributed under the License is distributed on an
*  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
*  KIND, either express or implied.  See the License for the
*  specific language governing permissions and limitations
*  under the License.
*/

/* model
*
* mypads:pad:$id
* pad = { group: $id, properties: false || { visibility: $, readonly: $ } }
*/

module.exports = (function () {
  'use strict';

  // Dependencies
  var ld = require('lodash');
  var cuid = require('cuid');
  var common = require('./common.js');
  var storage = require('../storage.js');
  var PPREFIX = storage.DBPREFIX.PAD;

  /**
  * ## Description
  *
  * The pad module contains business logic for private pads. These belongs to
  * groups and can have their own visibility settings.
  *
  * A pad can be viewed as an object like :
  *
  * var pad = {
  *   _id: 'autoGeneratedUniqueString',
  *   name: 'title',
  *   group: 'idOfTheLinkedGroup',
  *   visibility: undefined,
  *   password: undefined,
  *   readonly: true
  * };
  */

  var pad = {};

  /**
  * ## Internal functions
  *
  * These functions are tested through public functions and API.
  */

  pad.fn = {};

  /**
  * ## Public functions
  *
  * ### get
  */

  pad.get = ld.noop;

  /**
  * ### set
  *
  * This function adds a new pad or updates properties of an existing one.
  * It checks the fields, throws error if needed, set defaults options. As
  * arguments, it takes mandatory :
  *
  * - `params` object, with
  *
  *   - a `name` string that can't be empty
  *   - an `group` string, the unique key identifying the linked required group
  *   - `visibility`, `password`, `readonly` the same strings as for
  *   `model.group`, but optional : it will takes the group value if not
  *   defined
  * - `users` array, with ids of users invited to read and/or edit the pad, for
  *   restricted visibility only
  *
  * - `callback` function returning error if error, null otherwise and the
  *   pad object;
  * - a special `edit` boolean, defaults to *false* for reusing the function for
  *   set (edit) an existing pad.
  *
  */

  pad.set = function (params, callback) {
    common.addSetInit(params, callback, ['name', 'group']);
  };

  /**
  * ### del
  */

  pad.del = ld.noop;

  /**
  * ## Helpers functions
  *
  *  TODO
  *  Helper here are public functions created to facilitate interaction with
  *  the API and improve performance avoiding extra checking.
  */

  return pad;

}).call(this);
