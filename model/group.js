/**
* # Group Model
*
*  ## License
*
*  Licensed to the Apache Software Foundation (ASF) under one
*  or more contributor license agreements.  See the NOTICE file
*  distributed with this work for additional information
*  regarding copyright ownership.  The ASF licenses this file
*  to you under the Apache License, Version 2.0 (the
*  "License"); you may not use this file except in compliance
*  with the License.  You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing,
*  software distributed under the License is distributed on an
*  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
*  KIND, either express or implied.  See the License for the
*  specific language governing permissions and limitations
*  under the License.
*/

module.exports = (function () {
  'use strict';

  // Dependencies
  var ld = require('lodash');
  var cuid = require('cuid');
  var storage = require('../storage.js');
  var common = require('./common.js');
  var user = require('./user.js');
  var GPREFIX = storage.DBPREFIX.GROUP;
  var UPREFIX = storage.DBPREFIX.USER;
  var PPREFIX = storage.DBPREFIX.PAD;
  var hashPassword = require('./user.js').fn.hashPassword;

  /**
  * ## Description
  *
  * Groups belongs to users. Each user can have multiple groups of pads.
  *
  * A group object can be represented like :
  *
  * var group = {
  *   _id: 'autoGeneratedUniqueString',
  *   name: 'group1',
  *   pads: [ 'padkey1', 'padkey2' ],
  *   admins: [ 'userkey1', 'userkey2' ],
  *   users: [ 'ukey1' ],
  *   visibility: 'restricted' || 'public' || 'private',
  *   password: 'secret',
  *   readonly: false,
  *   tags: ['important', 'domain1']
  * };
  *
  */

  var group = {};

  /**
  * ## Public Functions
  *
  * ### get
  *
  *  Group reading
  *
  *  This function uses `common.getDel` with `del` to *false* and `GPREFIX`
  *  fixed. It will takes mandatory key string and callback function. See
  *  `common.getDel` for documentation.
  */

  group.get = ld.partial(common.getDel, false, GPREFIX);

  /**
  * ### getByUser
  *
  * `getByUser` is an asynchronous function that returns all groups for a
  * defined user, using `storage.fn.getKeys`. It takes :
  *
  * - a `user` object
  * - a `withExtra` boolean, for gathering or not pads information alongside
  *   with groups, with the help of `getPadsAndUsersByGroups` private function
  * - a `callback` function, called with *error* if needed, *null* and the
  *   results, an object with keys and groups values, otherwise.
  *
  */

  group.getByUser = function (user, withExtra, callback) {
    if (!ld.isObject(user) || !ld.isArray(user.groups)) {
      throw new TypeError('BACKEND.ERROR.TYPE.USER_INVALID');
    }
    if (!ld.isBoolean(withExtra)) {
      throw new TypeError('BACKEND.ERROR.TYPE.WITHEXTRA_BOOL');
    }
    if (!ld.isFunction(callback)) {
      throw new TypeError('BACKEND.ERROR.TYPE.CALLBACK_FN');
    }
    storage.fn.getKeys(
      ld.map(user.groups, function (g) { return GPREFIX + g; }),
      function (err, groups) {
        if (err) { return callback(err); }
        groups = ld.reduce(groups, function (memo, val, key) {
          key = key.substr(GPREFIX.length);
          memo[key] = val;
          return memo;
        }, {});
        if (withExtra) {
          group.fn.getPadsAndUsersByGroups(groups, callback);
        } else {
          callback(null, groups);
        }
      }
    );
  };

  /**
  * ### set
  *
  * This function adds a new group or updates an existing one.
  * It checks the fields, throws error if needed, set defaults options. As
  * arguments, it takes mandatory :
  *
  * - `params` object, with
  *
  *   - a `name` string that can't be empty
  *   - an `admin` string, the unique key identifying the initial administrator
  *   of the group
  *   - `visibility`, a string defined as *restricted* by default to invited
  *   users. Can be set to *public*, letting non authenticated users access to
  *   all pads in the group with the URL, or *private*, protected by a password
  *   phrase chosen by the administrator
  *   - `readonly`, *false* on creation. If *true*, pads that will be linked to
  *   the group will be set on readonly mode
  *   - `password` string field, only usefull if visibility has been fixed to
  *   private, by default an empty string
  * - `users` and `admins` arrays, with ids of users invited to read and/or edit
  *   pads, for restricted visibility only; and group administrators
  *
  * - `callback` function returning *Error* if error, *null* otherwise and the
  *   group object.
  *
  * `set` creates an empty `pads` array in case of creation, otherwise it just
  * gets back old value. `pads` array contains ids of pads attached to the
  * group via `model.pad` creation or update. Also, `password` is repopulated
  * from old value if the group has already been set as *private* and no
  * `password` has been given.
  */

  group.set = function (params, callback) {
    common.addSetInit(params, callback, ['name', 'admin']);
    var g = group.fn.assignProps(params);
    var check = function () {
      group.fn.handlePassword(g, function (err, password) {
        if (err) { return callback(err); }
        if (password) { g.password = password; }
        group.fn.checkSet(g, callback);
      });
    };
    if (params._id) {
      g._id = params._id;
      storage.db.get(GPREFIX + g._id, function (err, res) {
        if (err) { return callback(err); }
        if (!res) {
          return callback(new Error('BACKEND.ERROR.GROUP.INEXISTENT'));
        }
        g.pads = res.pads;
        if ((res.visibility === 'private') && !g.password) {
          g.password = res.password;
        }
        check();
      });
    } else {
      g._id = cuid();
      g.pads = [];
      check();
    }
  };


  /**
  * ### del
  *
  * Group removal
  *
  *  This function uses `common.getDel` with `del` to *true* and *GPREFIX*
  *  fixed. It will takes mandatory key string and callback function. See
  *  `common.getDel` for documentation.
  *
  *  It uses the `callback` function to handle secondary indexes for users and
  *  pads.
  */

  group.del = function (key, callback) {
    if (!ld.isFunction(callback)) {
      throw new TypeError('BACKEND.ERROR.TYPE.CALLBACK_FN');
    }
    common.getDel(true, GPREFIX, key, function (err, g) {
      if (err) { return callback(err); }
      group.fn.indexUsers(true, g, function (err) {
        if (err) { return callback(err); }
        group.fn.cascadePads(g, callback);
      });
    });
  };

  /**
  * ### inviteOrShare
  *
  * `inviteOrShare` is a asynchronous function that checks if given data, users
  * or admins logins, are correct and transforms it to expected values : unique
  * identifiers, before saving it to database.
  *
  * It takes :
  *
  * - `invite` boolean, *true* for user invitation, *false* for admin sharing;
  * - `gid` group unique identifier;
  * - array of users  `logins`;
  * - `callback` function calling with  *error* if error or *null* and the
  *   updated group otherwise.
  *
  * It takes care of exclusion of admins and users : admin status is a
  * escalation of user.
  */

  group.inviteOrShare = function (invite, gid, logins, callback) {
    if (!ld.isBoolean(invite)) {
      throw new TypeError('BACKEND.ERROR.TYPE.INVITE_BOOL');
    }
    if (!ld.isString(gid)) {
      throw new TypeError('BACKEND.ERROR.TYPE.GID_STR');
    }
    if (!ld.isArray(logins)) {
      throw new TypeError('BACKEND.ERROR.TYPE.LOGINS_ARR');
    }
    if (!ld.isFunction(callback)) {
      throw new TypeError('BACKEND.ERROR.TYPE.CALLBACK_FN');
    }
    user.fn.getIdsFromLogins(logins, function (err, uids) {
      if (err) { return callback(err); }
      group.get(gid, function (err, g) {
        if (err) { return callback(err); }
        if (invite) {
          g.users = ld.reject(uids, ld.partial(ld.includes, g.admins));
        } else {
          g.admins = ld.reject(uids, ld.partial(ld.includes, g.users));
        }
        group.fn.set(g, function (err, g) {
          if (err) { return callback(err); }
          callback(null, g);
        });
      });
    });
  };

  /**
  *  ## Helper Functions
  *
  *  Helper here are public functions created to facilitate interaction with
  *  the API and improve performance, avoiding extra checking when not needed.
  *  TODO : may be written to improve API usage
  */

  group.helper = {};

  /**
  * ### linkPads
  *
  *  `linkPads` is a function to attach new pads to an existing group.
  *  It takes mandatory arguments :
  *
  *  - the pad `_id`entifier, a string
  *  - `add`, a string for only one addition, an array for multiple adds.
  */

  group.helper.linkPads = ld.noop;

  group.helper.unlinkPads = ld.noop;

  /**
  * ### inviteUsers
  * string or array
  */

  group.helper.inviteUsers = ld.noop;

  /**
  * ### setAdmins
  * string or array
  */

  group.helper.setAdmins = ld.noop;

  /**
  * ### setPassword
  * string of false
  */

  group.helper.setPassword = ld.noop;

  /**
  * ### setPublic
  * boolean
  */

  group.helper.setPublic = ld.noop;

  /**
  * ### archive
  * boolean
  */

  group.helper.archive = ld.noop;

  /**
  *  ## Internal Functions
  *
  * These functions are not private like with closures, for testing purposes,
  * but they are expected be used only internally by other MyPads functions.
  * All of these are tested through public API.
  */

  group.fn = {};

  /**
  * ### assignProps
  *
  * `assignProps` takes params object and assign defaults if needed.
  * It creates :
  *
  * - an `admins` array, unioning admin key to optional others admins
  * - a `users` array, empty or with given keys
  * - a `pads` array, empty on creation, can't be fixed either
  * - a `visibility` string, defaults to *restricted*, with only two other
  *   possibilities : *private* or *public*
  * - a `password` string, *null* by default
  * - a `readonly` boolean, *false* by default
  *
  * It returns the group object.
  */

  group.fn.assignProps = function (params) {
    var p = params;
    var g = { name: p.name };
    p.admins = ld.isArray(p.admins) ? ld.filter(p.admins, ld.isString) : [];
    g.admins = ld.union([ p.admin ], p.admins);
    g.users = ld.uniq(p.users);
    var v = p.visibility;
    var vVal = ['restricted', 'private', 'public'];
    g.visibility = (ld.isString(v) && ld.includes(vVal, v)) ? v : 'restricted';
    g.password = ld.isString(p.password) ? p.password : null;
    g.readonly = ld.isBoolean(p.readonly) ? p.readonly : false;
    g.tags = ld.isArray(p.tags) ? p.tags : [];
    return g;
  };

  /**
  * ### handlePassword
  *
  * `handlePassword` is a function that ensures if `visibility` is *private*, a
  * password has been filled. Also, it encrypts the given password with a salt,
  * using `user.fn.hashPassword`. It takes :
  *
  * - `params` group object
  * - `callback` function, called with an error or *null* and the *password*
  *   object
  */

  group.fn.handlePassword = function (params, callback) {
    if ((params.visibility !== 'private') || ld.isObject(params.password)) {
      return callback(null);
    }
    if (!ld.isString(params.password) || ld.isEmpty(params.password)) {
      var err = new Error('BACKEND.ERROR.AUTHENTICATION.PASSWORD_INCORRECT');
      return callback(err);
    }
    hashPassword(undefined, params.password, function (err, res) {
      if (err) { return callback(err); }
      callback(null, res);
    });
  };


  /**
  * ### cascadePads
  *
  * `cascadePads` is an asynchronous function which handle cascade removals
  * after group removal. It takes :
  *
  * - the `group` object
  * - a `callback` function, returning *Error* or *null* if succeeded
  */

  group.fn.cascadePads = function (group, callback) {
    if (!ld.isEmpty(group.pads)) {
      var padsKeys = ld.map(group.pads, function (p) { return PPREFIX + p; });
      storage.fn.delKeys(padsKeys, function (err, res) {
        if (err) { return callback(err); }
        var e = new Error('BACKEND.ERROR.GROUP.CASCADE_REMOVAL_PROBLEM');
        if (!res) { return callback(e); }
        callback(null);
      });
    } else {
      callback(null);
    }
  };

  /**
  * ### indexUsers
  *
  * `indexUsers` is an asynchronous function which handles secondary indexes
  * for *users.groups* after group creation, update, removal. It takes :
  *
  * - a `del` boolean to know if we have to delete key from index or add it
  * - the `group` object
  * - a `callback` function, returning *Error* or *null* if succeeded
  */

  group.fn.indexUsers = function (del, group, callback) {
    var usersKeys = ld.map(ld.union(group.admins, group.users),
      function (u) { return UPREFIX + u; });
    storage.fn.getKeys(usersKeys, function (err, users) {
      if (err) { return callback(err); }
      ld.forIn(users, function (u, k) {
        if (del) {
          ld.pull(u.groups, group._id);
        } else {
          if (!ld.includes(u.groups, group._id)) {
            u.groups.push(group._id);
          }
        }
        users[k] = u;
      });
      storage.fn.setKeys(users, function (err) {
        if (err) { return callback(err); }
        return callback(null);
      });
    });
  };

  /**
  * ### set
  *
  * `set` is internal function that set the user group into the database.
  * It takes care of secondary indexes for users and pads by calling
  * `indexUsers`.
  *
  * It takes, as arguments :
  *
  * - the `g` group object
  * - the `callback` function returning an *Error* or *null* and the `g`
  *   object.
  */

  group.fn.set = function (g, callback) {
    storage.db.set(GPREFIX + g._id, g, function (err) {
      if (err) { return callback(err); }
      group.fn.indexUsers(false, g, function (err) {
        if (err) { return callback(err); }
        return callback(null, g);
      });
    });
  };

  /**
  * ### checkSet
  *
  * `checkSet` will ensure that all users and pads exist. If true, it calls
  * `fn.set`, else it will return an *Error*. `checkSet` takes :
  *
  * - a `g` group object
  * - a `callback` function returning an *Error* or *null* and the `g` object.
  */

  group.fn.checkSet = function (g, callback) {
    var pre = ld.curry(function (pre, val) { return pre + val; });
    var admins = ld.map(g.admins, pre(UPREFIX));
    var users = ld.map(g.users, pre(UPREFIX));
    var pads = ld.map(g.pads, pre(PPREFIX));
    var allKeys = ld.union(admins, users, pads);
    common.checkMultiExist(allKeys, function (err, res) {
      if (err) { return callback(err); }
      if (!res) {
        var e = new Error('BACKEND.ERROR.GROUP.ITEMS_NOT_FOUND');
        return callback(e);
      }
      group.fn.set(g, callback);
    });
  };

  /**
  * ### getPadsAndUsersByGroups
  *
  * `getPadsAndUsersByGroups` is an asynchronous private function which return
  * *pad* and *user* objects from an object of *group* objects (key: group).
  * It also takes a classic `callback` function.
  */

  group.fn.getPadsAndUsersByGroups = function (groups, callback) {
    var defs = { pads: PPREFIX, admins: UPREFIX, users: UPREFIX };
    var keys = ld.reduce(groups, function (memo, val) {
      ld.forIn(defs, function (pfx, f) {
        memo[f] = ld.union(memo[f], ld.map(val[f],
          function (v) { return pfx + v; }));
      });
      return memo;
    }, { pads: [], admins: [], users: [] });
      storage.fn.getKeys(ld.flatten(ld.values(keys)), function (err, res) {
        if (err) { return callback(err); }
        res = ld.reduce(res, function (memo, val, key) {
          var field;
          ld.forIn(keys, function (vals, f) {
            if (ld.includes(vals, key)) { field = f; }
          });
          key = key.substr(defs[field].length);
          memo[field][key] = val;
          return memo;
        }, { groups: groups, pads: {}, admins: {}, users: {} });
        callback(null, res);
      });
  };

  return group;


}).call(this);
